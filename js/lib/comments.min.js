async function likeComment(e){if(!await LiquiudityCheck(likeCost,"Like Comment",like))return!1;const n=getCookie("authToken"),t=new Headers({"Content-Type":"application/json",Authorization:`Bearer ${n}`});var o=JSON.stringify({query:`mutation LikeComment {\n            likeComment(commentid: "${e}") {\n                status\n                ResponseCode\n            }\n        }`,variables:{}}),r={method:"POST",headers:t,body:o,redirect:"follow"};return fetch(GraphGL,r).then(e=>e.json()).then(e=>{if("error"==e.data.likeComment.status)throw new Error(userfriendlymsg(e.data.likeComment.ResponseCode));return!0}).catch(e=>(Merror(userfriendlymsg(result.data.likeComment.ResponseCode)),!1))}function handleReply(e){const n=document.createElement("div"),t=document.createElement("textarea"),o=document.createElement("button");n.appendChild(t),n.appendChild(o);const r=document.getElementById(e.id);r.insertAdjacentElement("afterend",n),console.log("Replying to comment:",e)}async function createComment(e,n,t=null){if(!await LiquiudityCheck(commentCost,"Comment Post",1))return!1;const o=getCookie("authToken"),r=new Headers({"Content-Type":"application/json",Authorization:`Bearer ${o}`}),i="\n    mutation CreateComment($postId: ID!, $content: String!, $parentId: ID) {\n      createComment(action: COMMENT, postid: $postId, content: $content, parentid: $parentId) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n          commentid\n          userid\n          content\n          createdat\n          amountlikes\n          amountreplies\n          isliked\n          postid\n          parentid\n          user {\n              id\n              username\n              slug\n              img\n              isfollowed\n              isfollowing\n          }\n        }\n      }\n    }\n  ",s={postId:e,content:n,parentId:t};return fetch(GraphGL,{method:"POST",headers:r,body:JSON.stringify({query:i,variables:s})}).then(e=>e.json()).then(e=>(console.log("Antwort:",e),e)).catch(e=>(console.error("Fehler:",e),e))}async function fetchChildComments(e){const n=getCookie("authToken"),t=new Headers({"Content-Type":"application/json",Authorization:`Bearer ${n}`}),o="\n  query listChildComments($parent: ID!) {\n    listChildComments(parent: $parent) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            commentid\n            userid\n            postid\n            parentid\n            content\n            amountlikes\n            isliked\n            createdat\n            user {\n                id\n                username\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n  }",r={parent:e};return fetch(GraphGL,{method:"POST",headers:t,body:JSON.stringify({query:o,variables:r})}).then(e=>e.json()).then(e=>{if("error"===e.data.listChildComments.status)throw new Error(userfriendlymsg(e.data.listChildComments.ResponseCode));return e.data.listChildComments.affectedRows}).catch(e=>(console.error("Fehler:",e),null))}