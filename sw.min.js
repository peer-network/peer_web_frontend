async function fetchAndProcessAudio(e){const t=await fetch(e),n=await t.arrayBuffer();return new Response(n,{headers:{"Content-Type":"audio/mpeg"}})}const CACHE_NAME="peer-cache-v12";self.addEventListener("install",e=>{e.waitUntil(fetch("cache.php").then(e=>e.json()).then(async e=>{const t=await caches.open(CACHE_NAME);return await Promise.all(e.map(async e=>{try{return await t.add(e)}catch(t){console.error("Fehler beim Cachen der Datei:",e,t)}}))}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return caches.delete(e)}))))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method)return;const t=e.request;t.url.includes("sw.js")?e.respondWith(fetch(t).catch(()=>caches.match(t))):t.url.endsWith(".php")||t.url.includes(".js")||t.url.includes(".css")?e.respondWith(caches.open(CACHE_NAME).then(e=>e.match(t).then(n=>{const c=fetch(t).then(n=>(e.put(t,n.clone()),n));return n||c}))):e.respondWith(caches.match(t).then(e=>e||fetch(t).then(e=>caches.open(CACHE_NAME).then(n=>(n.put(t,e.clone()),e)))))});